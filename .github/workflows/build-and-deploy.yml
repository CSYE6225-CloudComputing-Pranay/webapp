name: build-and-deploy-server
run-name: ${{ github.actor }} is testing server and creating an AMI
on:
  push:
    branches:
      - main
jobs:
  build:
    outputs:
      AMI_ID: ${{ steps.get-ami.outputs.AMI_ID }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21.x' ]
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: ${{ vars.DB_NAME }}
          MYSQL_USER: ${{ vars.DB_USER_NAME }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
        ports:
          - ${{ vars.DB_PORT }}:${{ vars.DB_PORT }}
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - name: Display Go version
        run: go version
      - name: Install dependencies
        run: go get -u -d ./...
      - name: Install test dependencies
        run: go mod tidy
      - name: Build project
        run: env GOOS=linux GOARCH=amd64 go build webapp/cmd/assessment-application
      - name: Running healthz integration test
        run: cd ./test ; env GOOS=linux GOARCH=amd64 go test -run TestHealthTestSuite ; cd ..
        env:
          DB_HOST: ${{ vars.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_USER: ${{ vars.DB_USER_NAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ vars.DB_NAME }}
          LOG_FILE_PATH: assessment-application.log
      - name: Configure dev AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
      - name: Run `packer init`
        id: init
        run: "packer init ./aws-debian.pkr.hcl"

      - name: Run `packer format`
        id: format
        run: "packer fmt -check ./aws-debian.pkr.hcl"

      - name: Run `packer validate`
        id: validate
        run: "packer validate -var-file=aws-debian.auto.pkrvars.hcl ./aws-debian.pkr.hcl"

      - name: Build Artifact
        run: "packer build -var-file=aws-debian.auto.pkrvars.hcl -color=false -on-error=abort ./aws-debian.pkr.hcl"
      - name: Get AMI
        id: get-ami
        run: AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2) ; echo "AMI_ID = $AMI_ID">> $GITHUB_OUTPUT
  refresh-instances:
    needs: build
    runs-on: ubuntu-latest
    env:
      EC2_LAUNCH_TEMPLATE: ${{ vars.EC2_LAUNCH_TEMPLATE }}
      EC2_AUTOSCALING_GROUP: ${{ vars.EC2_AUTOSCALING_GROUP }}
    steps:
      - name: Configure demo AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: get the AMI id from the build job
        env:
          AMI_ID: ${{ needs.build.outputs.AMI_ID }}
        run: echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
      - name: print env variables
        run: |
          echo "EC2_LAUNCH_TEMPLATE: $EC2_LAUNCH_TEMPLATE"
          echo "EC2_AUTOSCALING_GROUP: $EC2_AUTOSCALING_GROUP"
          echo "AMI_ID: $AMI_ID"
      - name: create new launch template version
        run: |
          aws ec2 create-launch-template-version \
          --launch-template-name $EC2_LAUNCH_TEMPLATE \
          --launch-template-data ImageId=$AMI_ID \
          --source-version 1
      - name: refresh instances
        run: |
          aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $EC2_AUTOSCALING_GROUP \
      - name: wait on instance refresh completion
        run: |
          asg_name="<your-auto-scaling-group-name>"
          while true; do
            refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ env.EC2_AUTOSCALING_GROUP }} --query 'InstanceRefreshes[0].Status' --output text)
                
            if [ "$refresh_status" == "Successful" ]; then
                echo "Instance refresh completed successfully."
                break
            elif [ "$refresh_status" == "Failed" ]; then
                echo "Instance refresh failed."
                exit 1
            elif [ "$refresh_status" == "Cancelled" ]; then
                echo "Instance refresh cancelled."
                exit 1
            else
                echo "Instance refresh in progress..."
                sleep 30
            fi
          done


