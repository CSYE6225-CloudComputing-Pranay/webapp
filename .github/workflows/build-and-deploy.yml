name: build-and-deploy-server
run-name: ${{ github.actor }} is testing server and creating an AMI
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21.x' ]
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: ${{ vars.DB_NAME }}
          MYSQL_USER: ${{ vars.DB_USER_NAME }}
          MYSQL_PASSWORD: ${{ vars.DB_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
        ports:
          - ${{ vars.DB_PORT }}:${{ vars.DB_PORT }}
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - name: Display Go version
        run: go version
      - name: Install dependencies
        run: go get -u -d ./...
      - name: Install test dependencies
        run: go mod tidy
      - name: Build project
        run: env GOOS=linux GOARCH=amd64 go build webapp/cmd/assessment-application
      - name: Running healthz integration test
        run: cd ./test ; env GOOS=linux GOARCH=amd64 go test -run TestHealthTestSuite ; cd ..
        env:
          DB_HOST: ${{ vars.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_USER: ${{ vars.DB_USER_NAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ vars.DB_NAME }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
      - name: Run `packer init`
        id: init
        run: "packer init ./aws-debian.pkr.hcl"

      - name: Run `packer format`
        id: format
        run: "packer fmt -check ./aws-debian.pkr.hcl"

      - name: Run `packer validate`
        id: validate
        run: "packer validate -var-file=aws-debian.auto.pkrvars.hcl ./aws-debian.pkr.hcl"

      - name: Build Artifact
        run: "packer build -var-file=aws-debian.auto.pkrvars.hcl -color=false -on-error=abort ./aws-debian.pkr.hcl"


